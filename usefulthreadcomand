// this project use:
// led, laser, LDR, led graphic bar, LCD with I2C, bluetooth

// includes all necessary libraries
#include <LiquidCrystal_I2C.h>
#include <ThreadController.h>
#include <Ultrasonic.h>
#include <Thread.h>
#include <Wire.h>

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);
// SDA A4
// SCL A5

// pins and variables______________________________________________________
#define warn 11 // warn led

#define lampada 13 // led to emulate an rele module

float Filter;   // variable to read a value from private code insides class

// used in function 'LeituraLDR'
#define ldr A0  // light sensor
int luz;

// used in function 'UltraComPot'
#define potenciometro A1  // potenciometer
int pot;

// used in function 'warnFunction'
byte pwm;       // controla o brilho do led
bool muda = 0;  // interruptor

// used in function 'Barra'
int x = 0;      // control leds
bool t = 0;     // switch
unsigned long timeToChange, relogio;

// Class and functions
class Ultrasom {        // class
  public:
    // will set the ultrasonic pin's
    int trigger, echo;

#define N 5         // nÂº avarage
    float filter;   // filter variable
    int val[N];     // list

    // constructor
    // set the pins (we will set them after)
    Ultrasom(int trig, int _echo) {
      trigger = trig;
      echo = _echo;

      // setup to send and recive the pulse
      pinMode(trigger, OUTPUT);
      pinMode(echo, INPUT);
    }

    // read the float value of rensor and convert to centimeters
    float read() {
      // clear and sent one pulse
      digitalWrite(trigger, 0);       // time for Arduino calculate the distance
      delayMicroseconds(2);
      digitalWrite(trigger, 1);
      delayMicroseconds(10);
      digitalWrite(trigger, 0);

      // the 'pulseIn' wait the pulse back and give us the time that it spended to travel
      long duracao = pulseIn(echo, HIGH);

      // use 2.90 to get the distance in millimeters
      // use 29.0 to get the distance in centimeters
      // use 2900 to get the distance in meters
      return duracao / 29.0 / 2;
      // time from going and back divided by 2 to get only the distance from object
    };

    // filter's fuction already with att values
    float Update() {

      // att the values
      for (int i = N - 1; i > 0; i--) {
        val[i] = val[i - 1];
      }

      // set the first value for the new read from sensor
      val[0] = read();

      //
      long sunrise;

      // add it all
      for (int i = 0; i < N; i++) {
        sunrise += val[i];
      }

      //
      filter = sunrise / N;
      Filter = filter; // get the value of private variable
      return filter;
    };
};

Ultrasom us1(16, 17);   // add a new Ultrasonic 1
// if u wanna add a new sensor just do:
// Ultrasom sensor(trig_pin, echo_pin); // add a new ultrasonic sensor

const int barra[] = {   // led bar pins
  2, 3, 4, 5, 6, 7, 8, 9, 10, 12
};

// threads functions
void warnFunction() {   // control the warn led
  if (pwm < 254 && muda == 0)   // till maximum brightness
    pwm++;

  else {      // if hits 255 pwm, start to turn off till minimum brightness
    pwm--;
    if (pwm == 1)       // if hits the minimum, increase till maximum
      muda = 0;
  }
  analogWrite(warn, pwm);       // change the led brightness
}

void bluetoothh() {     // Bluetooth
  if (Serial.available()) {
    char b = Serial.read();
    //lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("char do blue: ");
    lcd.print(b);
  }
}

// led bar control
void Barra() {          // simple animation
  if (x <= 11) {
    if (relogio - timeToChange >= pot) {
      timeToChange = relogio;
      digitalWrite(barra[x], HIGH);
      digitalWrite(barra[x - 1], LOW);
      x++;
    }
    if (x == 11)x = 0;
  }
}

void leituraLDR() {     // read the ldr sensor
  luz = analogRead(ldr);

  //lcd.setCursor(0,1);
  //lcd.print("Presenca: ");
  //lcd.print(luz);
  //lcd.print("     ");

  if (luz < 400) digitalWrite(lampada, HIGH);
  else digitalWrite(lampada, LOW);
}

void ultraComPot() {
  pot = map(analogRead(potenciometro), 0, 1023, 10, 30);

  lcd.setCursor(0, 1);
  lcd.print("us1: ");
  lcd.print(us1.Update());
  lcd.print("  ");
  lcd.setCursor(13, 1);
  lcd.print(pot);
}

// create the threads we will use
ThreadController cpu;
Thread threadWarn;
Thread threadBluetooth;
Thread threadBarra;
Thread threadLeitura;
Thread threadUltra;
Thread threadUltraComPot;

// setup all threads and the 'delay' of each them
void ted() {
  threadWarn.setInterval(4);
  threadWarn.onRun(warnFunction);

  //threadBluetooth.setInterval(10);
  threadBluetooth.onRun(bluetoothh);

  threadBarra.setInterval(100);
  threadBarra.onRun(Barra);

  threadLeitura.setInterval(200);
  threadLeitura.onRun(leituraLDR);

  threadUltraComPot.setInterval(60);
  threadUltraComPot.onRun(ultraComPot);

  // add no controlador 'cpu'
  cpu.add(&threadWarn);
  cpu.add(&threadBluetooth);
  cpu.add(&threadBarra);
  cpu.add(&threadLeitura);
  cpu.add(&threadUltraComPot);
}

void setup() {
  // start Serial and LCD comunication
  Serial.begin(9600);
  lcd.begin(16, 2);

  ted();    // call the funciont to setup out threads

  for (int i = 0; i < 10; i++) {
    pinMode(barra[i], OUTPUT);
    delay(50);
  }

  pinMode(warn, OUTPUT);
  pinMode(lampada, OUTPUT);

  lcd.setCursor(0, 0);
  lcd.print("bluetooth: ");
  lcd.print("A");
}

void loop() {
  // With a simple line of code we can control our entire project
  // without using the  delay();  or pause our program in aone line of code
  cpu.run();      // execute all threads - each thread acn control one or more functions
  relogio = millis();   // configure our clock
}
